//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "products")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub productid: i64,
    #[sea_orm(column_type = "Text", nullable)]
    pub productname: Option<String>,
    pub supplierid: Option<i64>,
    pub categoryid: Option<i64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub quantityperunit: Option<String>,
    pub unitprice: Option<Decimal>,
    pub unitsinstock: Option<i64>,
    pub unitsonorder: Option<i64>,
    pub reorderlevel: Option<i64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub discontinued: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::order_details::Entity")]
    OrderDetails,
    #[sea_orm(
        belongs_to = "super::categories::Entity",
        from = "Column::Categoryid",
        to = "super::categories::Column::Categoryid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Categories,
    #[sea_orm(
        belongs_to = "super::suppliers::Entity",
        from = "Column::Supplierid",
        to = "super::suppliers::Column::Supplierid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Suppliers,
}

impl Related<super::order_details::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderDetails.def()
    }
}

impl Related<super::categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Categories.def()
    }
}

impl Related<super::suppliers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Suppliers.def()
    }
}
