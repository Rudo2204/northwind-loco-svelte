//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "employees")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub employeeid: i64,
    #[sea_orm(column_type = "Text", nullable)]
    pub lastname: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub firstname: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub title: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub titleofcourtesy: Option<String>,
    pub birthdate: Option<Date>,
    pub hiredate: Option<Date>,
    #[sea_orm(column_type = "Text", nullable)]
    pub address: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub city: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub region: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub postalcode: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub country: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub homephone: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub extension: Option<String>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub photo: Option<Vec<u8>>,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
    pub reportsto: Option<i64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub photopath: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::Reportsto",
        to = "Column::Employeeid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::employeeterritories::Entity")]
    Employeeterritories,
    #[sea_orm(has_many = "super::orders::Entity")]
    Orders,
}

impl Related<super::employeeterritories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Employeeterritories.def()
    }
}

impl Related<super::orders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Orders.def()
    }
}
