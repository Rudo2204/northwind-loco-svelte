//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "territories")]
pub struct Model {
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub territoryid: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub territorydescription: Option<String>,
    pub regionid: Option<i64>,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::employeeterritories::Entity")]
    Employeeterritories,
    #[sea_orm(
        belongs_to = "super::regions::Entity",
        from = "Column::Regionid",
        to = "super::regions::Column::Regionid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Regions,
}

impl Related<super::employeeterritories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Employeeterritories.def()
    }
}

impl Related<super::regions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Regions.def()
    }
}
